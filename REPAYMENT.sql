CREATE OR REPLACE FUNCTION TUMRPACPMB001.AMORTIZATION_TYPE_TR (
	v_AMORTIZATION_TYPE IN T_DM_ABS_POSITION_A.AMORTIZATION_TYPE%TYPE
)
RETURN NUMBER
IS 
		v_Result NUMBER;
BEGIN
				
	IF v_AMORTIZATION_TYPE = 'Hard bullet' THEN 
	v_Result :=1;
	ELSIF v_AMORTIZATION_TYPE ='n.a.' THEN 
	v_Result := 10;
	ELSIF v_AMORTIZATION_TYPE IS NULL THEN 
	v_Result := 10;
	ELSIF v_AMORTIZATION_TYPE = 'Bullet' THEN 
	v_Result := 2;
    ELSIF v_AMORTIZATION_TYPE = 'Pay through' THEN 
   v_Result := 3;
    ELSIF v_AMORTIZATION_TYPE = 'Amortizing' THEN 
   v_Result := 4;
    ELSE 
    v_Result := NULL;
	END IF;
	RETURN v_Result;
END;

CREATE OR REPLACE FUNCTION TUMRPACPMB001.FIRST_PAYMENT_DATE (
	p_ACTUAL_DATE IN  T_DM_ABS_POSITION_A.ACTUAL_DATE%TYPE,
	p_LEGAL_MATURITY_DATE IN  T_DM_ABS_POSITION_A.LEGAL_MATURITY_DATE%TYPE,
	p_EXPECTED_MATURITY_DATE IN  T_DM_ABS_POSITION_A.EXPECTED_MATURITY_DATE%TYPE
)
RETURN DATE
IS 
v_INTV_TYPE NUMBER;
v_MON_NUMBER NUMBER;
v_F_PAYMENT_DATE DATE;

BEGIN

	IF p_LEGAL_MATURITY_DATE >= p_ACTUAL_DATE THEN
	
	select floor(months_between(p_LEGAL_MATURITY_DATE, p_ACTUAL_DATE)) 
	INTO v_MON_NUMBER from DUAL;

		IF ADD_MONTHS(p_LEGAL_MATURITY_DATE,v_MON_NUMBER) < p_ACTUAL_DATE THEN
		v_F_PAYMENT_DATE := ADD_MONTHS(p_LEGAL_MATURITY_DATE,v_MON_NUMBER)+1;
		ELSE 
	v_F_PAYMENT_DATE := ADD_MONTHS(p_LEGAL_MATURITY_DATE,v_MON_NUMBER);
		END IF;
	ELSIF p_LEGAL_MATURITY_DATE IS NULL AND p_EXPECTED_MATURITY_DATE >= p_ACTUAL_DATE THEN
		select floor(months_between(p_EXPECTED_MATURITY_DATE, p_ACTUAL_DATE)) 
		INTO v_MON_NUMBER from DUAL;
			IF ADD_MONTHS(p_EXPECTED_MATURITY_DATE,v_MON_NUMBER) < p_ACTUAL_DATE THEN
			v_F_PAYMENT_DATE := ADD_MONTHS(p_EXPECTED_MATURITY_DATE,v_MON_NUMBER)+1;
			ELSE 
			v_F_PAYMENT_DATE := ADD_MONTHS(p_EXPECTED_MATURITY_DATE,v_MON_NUMBER);
			END IF;
	ELSE v_F_PAYMENT_DATE := p_LEGAL_MATURITY_DATE;
	END IF;
	RETURN v_F_PAYMENT_DATE;
END;

CREATE OR REPLACE FUNCTION TUMRPACPMB001.LAST_PAYMENT_DATE (
	p_ACTUAL_DATE IN  T_DM_ABS_POSITION_A.ACTUAL_DATE%TYPE,
	p_LEGAL_MATURITY_DATE IN  T_DM_ABS_POSITION_A.LEGAL_MATURITY_DATE%TYPE,
	p_EXPECTED_MATURITY_DATE IN  T_DM_ABS_POSITION_A.EXPECTED_MATURITY_DATE%TYPE
)
RETURN DATE
IS 
 v_LAST_P_DATE DATE;
BEGIN
		IF p_EXPECTED_MATURITY_DATE >= p_ACTUAL_DATE AND (p_EXPECTED_MATURITY_DATE <= 
		p_LEGAL_MATURITY_DATE OR p_LEGAL_MATURITY_DATE IS NULL) THEN 
		v_LAST_P_DATE := p_EXPECTED_MATURITY_DATE;
		ELSIF p_LEGAL_MATURITY_DATE >= p_ACTUAL_DATE THEN 
		v_LAST_P_DATE := p_LEGAL_MATURITY_DATE;
		END IF;
	RETURN v_LAST_P_DATE;
END;

CREATE OR REPLACE PROCEDURE ADD_PAYMENT_DATE
(  p_ACTUAL_DATE IN T_DM_ABS_REPAYMENT_A.ACTUAL_DATE%TYPE,
   p_INSTRUMENT_ISIN_KEY IN T_DM_ABS_REPAYMENT_A.INSTRUMENT_ISIN_KEY%TYPE,
   p_CUSTODY_ACCOUNT_KEY IN T_DM_ABS_REPAYMENT_A.CUSTODY_ACCOUNT_KEY%TYPE,
   p_NOMINAL_EUR_VAL IN T_DM_ABS_REPAYMENT_A.NOMINAL_EUR_VAL%TYPE,
   p_INTERVAL_TYPE IN T_DM_TEMP_REPAYMENT_A.INTERVAL_TYPE%TYPE,
   p_AMOUNT_EUR_VAL IN T_DM_ABS_REPAYMENT_A.AMOUNT_EUR_VAL%TYPE,
   p_FIRST_PAYMENT_DATE IN T_DM_ABS_REPAYMENT_A.ACTUAL_DATE%TYPE,
   p_LAST_PAYMENT_DATE IN T_DM_ABS_REPAYMENT_A.ACTUAL_DATE%TYPE,
   p_AMORTIZATION_TYPE_TR IN T_DM_TEMP_REPAYMENT_A.AMORTIZATION_TYPE_TR%TYPE
   )
IS
	v_YEAR NUMBER;
	v_QUARTER NUMBER;
	v_MONTH NUMBER;
	v_PAYMENT_DATE DATE;
	v_FIRST_PAYMENT_DATE DATE;
	v_INTERVAL_COUNT NUMBER;
	v_MON_NUMBER NUMBER;
	v_AMOUNT_EUR_VAL NUMBER(17,2);
	v_NOMINAL_EUR_VAL NUMBER(17,2);
BEGIN
	
	v_FIRST_PAYMENT_DATE := p_FIRST_PAYMENT_DATE;
    v_AMOUNT_EUR_VAL := p_AMOUNT_EUR_VAL;	
    v_NOMINAL_EUR_VAL := p_NOMINAL_EUR_VAL;
   
	IF p_FIRST_PAYMENT_DATE > p_LAST_PAYMENT_DATE THEN
 		v_PAYMENT_DATE := p_LAST_PAYMENT_DATE;
 	END IF;
 	 
  	v_QUARTER := GET_QUARTER(v_PAYMENT_DATE);
    v_MONTH := GET_MONTH(v_PAYMENT_DATE);
   	v_YEAR := GET_YEAR(v_PAYMENT_DATE);
    select floor(months_between(v_FIRST_PAYMENT_DATE,v_PAYMENT_DATE)) 
	INTO v_MON_NUMBER from DUAL;
	v_INTERVAL_COUNT := TRUNC(v_MON_NUMBER/p_INTERVAL_TYPE);
	
	 IF p_AMORTIZATION_TYPE_TR IN (3,4) THEN 
 	v_AMOUNT_EUR_VAL := ROUND(v_NOMINAL_EUR_VAL/(v_INTERVAL_COUNT),2);
 	ELSE
 	v_AMOUNT_EUR_VAL := 0;
 	END IF;
 

	
  WHILE v_FIRST_PAYMENT_DATE >= v_PAYMENT_DATE LOOP
	   
  INSERT INTO T_DM_ABS_REPAYMENT_A ("ACTUAL_DATE", "INSTRUMENT_ISIN_KEY",  
  "CUSTODY_ACCOUNT_KEY", "PAYMENT_DATE", "NOMINAL_EUR_VAL","AMOUNT_EUR_VAL",
  "YEAR", "QUARTER", "MONTH"
 )   VALUES (p_ACTUAL_DATE, p_INSTRUMENT_ISIN_KEY,
 p_CUSTODY_ACCOUNT_KEY, v_PAYMENT_DATE, v_NOMINAL_EUR_VAL, v_AMOUNT_EUR_VAL,
 v_YEAR, v_QUARTER, v_MONTH
);
	
    v_PAYMENT_DATE := ADD_MONTHS(v_PAYMENT_DATE,p_INTERVAL_TYPE);
	v_NOMINAL_EUR_VAL := ROUND((v_NOMINAL_EUR_VAL -v_AMOUNT_EUR_VAL),2);
   	v_QUARTER := GET_QUARTER(v_PAYMENT_DATE);
 	v_MONTH := GET_MONTH(v_PAYMENT_DATE);
   	v_YEAR := GET_YEAR(v_PAYMENT_DATE);
    v_INTERVAL_COUNT := v_INTERVAL_COUNT -1;
   
     IF v_INTERVAL_COUNT = 0 THEN
	v_AMOUNT_EUR_VAL := v_AMOUNT_EUR_VAL + v_NOMINAL_EUR_VAL;
	v_NOMINAL_EUR_VAL := 0;
	v_PAYMENT_DATE := v_FIRST_PAYMENT_DATE;

	END IF;
   
  END LOOP;
 COMMIT;
END;

CREATE OR REPLACE FUNCTION TUMRPACPMB001.GET_QUARTER (p_date IN DATE)
RETURN NUMBER
IS
	v_QUARTER NUMBER;
	v_MONTH NUMBER;
BEGIN
v_MONTH := TO_CHAR (p_date, 'mm');

	IF v_MONTH IN (1, 2, 3)
		THEN v_QUARTER := 1;
	ELSIF v_MONTH IN (4, 5, 6)
		THEN v_QUARTER := 2;
	ELSIF v_MONTH IN (7, 8, 9)
		THEN v_QUARTER := 3;
	ELSIF v_MONTH IN (10, 11, 12)
		THEN v_QUARTER := 4;
	END IF;
	RETURN v_QUARTER;
END;

CREATE OR REPLACE FUNCTION TUMRPACPMB001.GET_MONTH (p_date IN DATE)
RETURN NUMBER
IS
	v_MONTH NUMBER;
BEGIN
v_MONTH := TO_CHAR (p_date, 'MM');

	RETURN v_MONTH;
END;

CREATE OR REPLACE FUNCTION TUMRPACPMB001.GET_YEAR (p_date IN DATE)
RETURN NUMBER
IS
	v_YEAR NUMBER;
BEGIN
	v_YEAR := TO_CHAR (p_date, 'YYYY');

	RETURN v_YEAR;
END;
