CREATE OR REPLACE FUNCTION cc.FIRST_PAYMENT_DATE (
	p_ACTUAL_DATE IN  TableA.ACTUAL_DATE%TYPE,
	p_LEGAL_MATURITY_DATE IN  TableA.LEGAL_DATE%TYPE,
	p_EXPECTED_MATURITY_DATE IN  TableA.EXPECTED_DATE%TYPE,
	p_INTREST_PERIOD_FREQUENCY IN TableA.PERIOD_FREQUENCY%TYPE
)
RETURN DATE
IS 
v_INTV_TYPE NUMBER;
v_MON_NUMBER NUMBER;
v_F_PAYMENT_DATE DATE;


	

BEGIN
	v_INTV_TYPE := INTERVAL_TYPE(p_PERIOD_FREQUENCY);

	IF p_LEGAL_DATE >= p_ACTUAL_DATE THEN
	
	select floor(months_between(p_LEGAL_DATE, p_ACTUAL_DATE))*(-1) 
	INTO v_MON_NUMBER from DUAL;
	
		IF ADD_MONTHS(p_LEGAL_DATE,ROUND(v_MON_NUMBER/v_INTV_TYPE)*v_INTV_TYPE) < p_ACTUAL_DATE THEN
		v_F_PAYMENT_DATE := ADD_MONTHS(p_LEGAL_DATE,
		ROUND((v_MON_NUMBER+1)/v_INTV_TYPE)*v_INTV_TYPE);
		ELSE 
	v_F_PAYMENT_DATE := ADD_MONTHS(p_LEGAL_DATE,ROUND(v_MON_NUMBER/v_INTV_TYPE)*v_INTV_TYPE);
		END IF;
	ELSIF p_LEGAL_DATE IS NULL AND p_EXPECTED_DATE >= p_ACTUAL_DATE THEN
		select floor(months_between(p_EXPECTED_DATE, p_ACTUAL_DATE))*(-1) 
		INTO v_MON_NUMBER from DUAL;
			IF ADD_MONTHS(p_EXPECTED_DATE,ROUND(v_MON_NUMBER/v_INTV_TYPE)*v_INTV_TYPE) < p_ACTUAL_DATE THEN
			v_F_PAYMENT_DATE := ADD_MONTHS(p_EXPECTED_DATE,ROUND((v_MON_NUMBER+1)/v_INTV_TYPE)*v_INTV_TYPE);
			ELSE 
			v_F_PAYMENT_DATE := ADD_MONTHS(p_EXPECTED_DATE,ROUND(v_MON_NUMBER/v_INTV_TYPE)*v_INTV_TYPE);
			END IF;
	ELSE v_F_PAYMENT_DATE := p_LEGAL_DATE;
	END IF;
	RETURN v_F_PAYMENT_DATE;
END;



CREATE OR REPLACE PROCEDURE cc.ADD_PAYMENT_DATE
(  p_ACTUAL_DATE IN Tableb.ACTUAL_DATE%TYPE,
   p_INSTRUMENT_ISIN_KEY IN Tableb.INSTRUMENT_KEY%TYPE,
   p_CUSTODY_ACCOUNT_KEY IN Tableb.ACCOUNT_KEY%TYPE,
   p_NOMINAL_EUR_VAL IN Tableb.NOMINAL_EUR_VAL%TYPE,
   p_INTERVAL_TYPE IN Tableb.INTERVAL_TYPE%TYPE,
   p_FIRST_PAYMENT_DATE IN Tableb.ACTUAL_DATE%TYPE,
   p_LAST_PAYMENT_DATE IN Tableb.ACTUAL_DATE%TYPE,
   p_AMORTIZATION_TYPE_TR IN Tableb.AMORTIZATION_TYPE_TR%TYPE,
   p_dummy OUT varchar2
   )
IS
	v_YEAR NUMBER;
	v_QUARTER NUMBER;
	v_MONTH NUMBER;
	v_PAYMENT_DATE DATE;
	v_FIRST_PAYMENT_DATE DATE;
	v_INTERVAL_COUNT NUMBER;
	v_MON_NUMBER NUMBER;
	v_AMOUNT_EUR_VAL NUMBER(17,2);
	v_NOMINAL_EUR_VAL NUMBER(17,2);
BEGIN
	
	
    v_NOMINAL_EUR_VAL := p_NOMINAL_EUR_VAL;
	v_AMOUNT_EUR_VAL :=0;
	
	IF p_FIRST_PAYMENT_DATE > p_LAST_PAYMENT_DATE THEN
 		v_PAYMENT_DATE := p_LAST_PAYMENT_DATE;
 		v_FIRST_PAYMENT_DATE := p_FIRST_PAYMENT_DATE;
 	ELSE
 		v_PAYMENT_DATE := p_FIRST_PAYMENT_DATE;
 		v_FIRST_PAYMENT_DATE := p_LAST_PAYMENT_DATE;
 	END IF;
 	 
  	v_QUARTER := GET_QUARTER(v_PAYMENT_DATE);
    v_MONTH := GET_MONTH(v_PAYMENT_DATE);
   	v_YEAR := GET_YEAR(v_PAYMENT_DATE);
    select floor(months_between(v_FIRST_PAYMENT_DATE,v_PAYMENT_DATE)) 
	INTO v_MON_NUMBER from DUAL;
	v_INTERVAL_COUNT := TRUNC(v_MON_NUMBER/p_INTERVAL_TYPE);
	
	 IF p_AMORTIZATION_TYPE_TR IN (3,4) THEN 
 	v_AMOUNT_EUR_VAL := ROUND(v_NOMINAL_EUR_VAL/(v_INTERVAL_COUNT),2);
 	ELSE
 	v_AMOUNT_EUR_VAL := 0;
 	END IF;
 

	
  WHILE v_FIRST_PAYMENT_DATE >= v_PAYMENT_DATE LOOP
	   
  INSERT INTO T_DM_ABS_REPAYMENT_A_FIC ("ACTUAL_DATE", "INSTRUMENT_ISIN_KEY",  
  "CUSTODY_ACCOUNT_KEY", "PAYMENT_DATE", "NOMINAL_EUR_VAL","AMOUNT_EUR_VAL",
  "YEAR", "QUARTER", "MONTH"
 )   VALUES (p_ACTUAL_DATE, p_INSTRUMENT_ISIN_KEY,
 p_CUSTODY_ACCOUNT_KEY, v_PAYMENT_DATE, v_NOMINAL_EUR_VAL, v_AMOUNT_EUR_VAL,
 v_YEAR, v_QUARTER, v_MONTH
);
	
    v_PAYMENT_DATE := ADD_MONTHS(v_PAYMENT_DATE,p_INTERVAL_TYPE);
	v_NOMINAL_EUR_VAL := ROUND((v_NOMINAL_EUR_VAL -v_AMOUNT_EUR_VAL),2);
   	v_QUARTER := GET_QUARTER(v_PAYMENT_DATE);
 	v_MONTH := GET_MONTH(v_PAYMENT_DATE);
   	v_YEAR := GET_YEAR(v_PAYMENT_DATE);
    v_INTERVAL_COUNT := v_INTERVAL_COUNT -1;
   
     IF v_INTERVAL_COUNT = 0 THEN
	v_AMOUNT_EUR_VAL := v_AMOUNT_EUR_VAL + v_NOMINAL_EUR_VAL;
	v_NOMINAL_EUR_VAL := 0;
	v_PAYMENT_DATE := v_FIRST_PAYMENT_DATE;

	END IF;
   
  END LOOP;
 COMMIT;
p_dummy := 'Y';
END;
